import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  Alert,
  SafeAreaView,
  RefreshControl
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';

import preprocessedDataService from '../services/PreprocessedDataService';
import { LocationService } from '../services/LocationService';
import { audioService } from '../services/AudioService';
import { wazeService } from '../services/WazeService';

import { PointOfInterest, PointCategory, Location, RootStackParamList } from '../types';
import CategoryFilter from '../components/CategoryFilter';
import MapView from '../components/MapView';
import PointsList from '../components/PointsList';

type HomeScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Home'>;

export function HomeScreen() {
  const navigation = useNavigation<HomeScreenNavigationProp>();
  
  // States
  const [points, setPoints] = useState<PointOfInterest[]>([]);
  const [allPoints, setAllPoints] = useState<PointOfInterest[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<PointCategory | 'all'>('all');
  const [currentLocation, setCurrentLocation] = useState<Location | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isLocationLoading, setIsLocationLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  
  // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–µ–Ω—Ç—Ä –ò–∑—Ä–∞–∏–ª—è (–ò–µ—Ä—É—Å–∞–ª–∏–º)
  const [mapLocation, setMapLocation] = useState<Location>({
    latitude: 31.7683,
    longitude: 35.2137,
    accuracy: 0,
    timestamp: Date.now(),
  });

  // Services
  const locationService = new LocationService();

  useEffect(() => {
    initializeData();
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    getCurrentLocation();
  }, []);

  const initializeData = async () => {
    try {
      setIsLoading(true);
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      const loadedPoints = preprocessedDataService.getAllPoints();
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loadedPoints.length} —Ç–æ—á–µ–∫`);
      
      setAllPoints(loadedPoints);
      setPoints(loadedPoints);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = preprocessedDataService.getStatistics();
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    } finally {
      setIsLoading(false);
    }
  };

  const getCurrentLocation = async () => {
    try {
      setIsLocationLoading(true);
      const location = await locationService.getCurrentLocation();
      if (location) {
        setCurrentLocation(location);
        setMapLocation(location);
        console.log('üìç –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:', location);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        await showNearbyPoints(location.latitude, location.longitude);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    } finally {
      setIsLocationLoading(false);
    }
  };

  const updateNearbyPointsWithCategory = async (categoryId: PointCategory | 'all', lat?: number, lon?: number) => {
    try {
      let nearbyPoints: PointOfInterest[] = [];
      
      if (categoryId === 'all') {
        // –î–ª—è "–í—Å–µ" –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
        nearbyPoints = allPoints;
        console.log(`üîç –ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ ${nearbyPoints.length} —Ç–æ—á–µ–∫`);
      } else {
        // –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        nearbyPoints = preprocessedDataService.getPointsByCategory(categoryId);
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${nearbyPoints.length} —Ç–æ—á–µ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);
      }
      
      setPoints(nearbyPoints);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫:', error);
    }
  };

  const handleCategorySelect = async (categoryId: PointCategory | 'all') => {
    setSelectedCategory(categoryId);
    await updateNearbyPointsWithCategory(categoryId);
  };

  const handlePointPress = (point: PointOfInterest) => {
    navigation.navigate('PointDetail', { point });
  };

  const showNearbyPoints = async (latitude: number, longitude: number) => {
    try {
      let nearbyPoints: PointOfInterest[] = [];
      
      if (selectedCategory === 'all') {
        nearbyPoints = preprocessedDataService.getNearbyPoints(latitude, longitude, 15000);
        console.log(`üîç –ü–æ–∫–∞–∑—ã–≤–∞—é ${nearbyPoints.length} –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫`);
      } else {
        nearbyPoints = preprocessedDataService.getNearbyPointsByCategory(latitude, longitude, selectedCategory, 15000);
        console.log(`üîç –ü–æ–∫–∞–∑—ã–≤–∞—é ${nearbyPoints.length} –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${selectedCategory}`);
      }
      
      setPoints(nearbyPoints);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫:', error);
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await initializeData();
    if (currentLocation) {
      await showNearbyPoints(currentLocation.latitude, currentLocation.longitude);
    }
    setRefreshing(false);
  };

  const playAudio = async (point: PointOfInterest) => {
    try {
      const success = await audioService.playPointAudio(point.audioFilePath);
      if (!success) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º');
    }
  };

  const openInWaze = async (point: PointOfInterest) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Waze
      const isWazeAvailable = await wazeService.isWazeInstalled();
      
      if (isWazeAvailable) {
        await wazeService.openWazeNavigation(point.latitude, point.longitude);
      } else {
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        Alert.alert(
          'Waze –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
          '–û—Ç–∫—Ä—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏?',
          [
            { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
            { text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', onPress: () => wazeService.openAlternativeMaps(point.latitude, point.longitude) },
          ]
        );
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
    }
  };

  const formatPointInfo = (point: PointOfInterest) => {
    return {
      title: point.name,
      subtitle: getCategoryName(point.category),
      coords: `${point.latitude.toFixed(4)}, ${point.longitude.toFixed(4)}`
    };
  };

  const getCategoryName = (category: PointCategory): string => {
    const categoryNames: Record<PointCategory, string> = {
      historical: '–ò—Å—Ç–æ—Ä–∏—è',
      religious: '–†–µ–ª–∏–≥–∏—è',
      children: '–î–µ—Ç—Å–∫–∏–µ',
      nature: '–ü—Ä–∏—Ä–æ–¥–∞',
      culture: '–ö—É–ª—å—Ç—É—Ä–∞',
      tourism: '–¢—É—Ä–∏–∑–º',
      architecture: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
      amenity: '–£–¥–æ–±—Å—Ç–≤–∞',
      leisure: '–î–æ—Å—É–≥',
    };

    return categoryNames[category] || category;
  };

  const getCategoryColor = (category: PointCategory): string => {
    const colors: Record<PointCategory, string> = {
      historical: '#8B4513',
      religious: '#4169E1', 
      children: '#FF69B4',
      nature: '#228B22',
      culture: '#9932CC',
      tourism: '#FF4500',
      architecture: '#696969',
      amenity: '#20B2AA',
      leisure: '#32CD32',
    };

    return colors[category] || '#666666';
  };

  const getAvailableCategories = (): PointCategory[] => {
    return preprocessedDataService.getCategories();
  };

  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>–ê—É–¥–∏–æ–≥–∏–¥ –ò–∑—Ä–∞–∏–ª—è</Text>
        <Text style={styles.subtitle}>{points.length} —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞</Text>
      </View>

      {/* Location Button */}
      <TouchableOpacity 
        style={styles.locationButton}
        onPress={getCurrentLocation}
        disabled={isLocationLoading}
      >
        <Text style={styles.locationButtonText}>
          {isLocationLoading ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...' : 'üìç –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ'}
        </Text>
      </TouchableOpacity>

      {/* Category Filter */}
      <CategoryFilter
        categories={getAvailableCategories()}
        selectedCategory={selectedCategory}
        onCategorySelect={handleCategorySelect}
        getCategoryName={getCategoryName}
        getCategoryColor={getCategoryColor}
      />

      {/* Map - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º */}
      <MapView
        currentLocation={mapLocation}
        points={points.slice(0, 50)} // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        onPointPress={handlePointPress}
        getCategoryColor={getCategoryColor}
      />

      {/* Points List - —Ç–µ–ø–µ—Ä—å –±–µ–∑ ScrollView */}
      <PointsList
        points={points}
        onPointPress={handlePointPress}
        onPlayAudio={playAudio}
        onOpenInWaze={openInWaze}
        formatPointInfo={formatPointInfo}
        getCategoryColor={getCategoryColor}
        refreshing={refreshing}
        onRefresh={onRefresh}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 18,
    color: '#666',
  },
  header: {
    padding: 20,
    backgroundColor: '#f8f9fa',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#333',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
  locationButton: {
    margin: 20,
    padding: 15,
    backgroundColor: '#007AFF',
    borderRadius: 10,
    alignItems: 'center',
  },
  locationButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
  },
}); 