const fs = require('fs');
const path = require('path');

const audioDir = './assets/audio';
const audioServicePath = './src/services/AudioService.ts';

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
function getAudioFiles() {
  try {
    const files = fs.readdirSync(audioDir);
    return files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.mp3', '.wav', '.m4a', '.aac'].includes(ext);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ –∞—É–¥–∏–æ:', error);
    return [];
  }
}

// –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è AudioService
function generateAudioMapping(files) {
  const mapping = files.map(file => {
    const fileName = path.basename(file, path.extname(file));
    return `  '${file}': require('../../assets/audio/${file}'),`;
  }).join('\n');

  return `// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ${new Date().toLocaleString()}
const audioFiles: { [key: string]: any } = {
${mapping}
};`;
}

// –û–±–Ω–æ–≤–ª—è–µ–º AudioService.ts
function updateAudioService(mapping) {
  try {
    let content = fs.readFileSync(audioServicePath, 'utf8');
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º
    const startMarker = '// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤';
    const endMarker = '};';
    
    const startIndex = content.indexOf(startMarker);
    const endIndex = content.indexOf(endMarker, startIndex) + endMarker.length;
    
    if (startIndex !== -1 && endIndex !== -1) {
      const beforeMapping = content.substring(0, startIndex);
      const afterMapping = content.substring(endIndex);
      
      content = beforeMapping + mapping + afterMapping;
      
      fs.writeFileSync(audioServicePath, content);
      console.log('‚úÖ AudioService.ts –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ –º–∞–ø–ø–∏–Ω–≥–∞ –≤ AudioService.ts');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AudioService.ts:', error);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...');
  
  const audioFiles = getAudioFiles();
  
  if (audioFiles.length === 0) {
    console.log('üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ assets/audio/');
    console.log('üí° –î–æ–±–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
    return;
  }
  
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${audioFiles.length} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:`);
  audioFiles.forEach(file => console.log(`  - ${file}`));
  
  const mapping = generateAudioMapping(audioFiles);
  updateAudioService(mapping);
  
  console.log('\nüéâ –ú–∞–ø–ø–∏–Ω–≥ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!');
  console.log('üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
}

main(); 